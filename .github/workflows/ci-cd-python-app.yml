name: CI/CD Workflow

on:
  push:
    branches: [ devops-ci-cd ]
  pull_request:
    branches: [ devops-ci-cd ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fastapi_backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push backend
      uses: docker/build-push-action@v2
      with:
        context: ./fastapi_backend
        file: ./fastapi_backend/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/fastapi_backend:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/fastapi_backend:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and push frontend
      uses: docker/build-push-action@v2
      with:
        context: ./streamlit 
        file: ./streamlit/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/streamlit:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/streamlit:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache


  deploy: 
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: autopilot-cluster-1
      GKE_REGION: us-central1

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Get the GKE credentials so we can deploy to the cluster
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION" --project "$PROJECT_ID"

    - name: Create namespace & set in Kustomize
      run: |
         namespacePresentBlue= kubectl get ns | grep python-app-blue | wc -l
         namespacePresentGreen= kubectl get ns | grep python-app-green | wc -l
         if [ $namespacePresentBlue -eq 0 ]
         then
            kubectl create ns python-app-blue
            cd k8s
            kustomize edit set namespace python-app-blue
            echo "NEW_NAMESPACE=python-app-blue" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=python-app-green" >> $GITHUB_ENV
         elif [ $namespacePresentGreen -eq 0 ]
         then
            kubectl create ns python-app-green
            cd k8s
            kustomize edit set namespace python-app-green
            echo "NEW_NAMESPACE=python-app-green" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=python-app-blue" >> $GITHUB_ENV
         else
            echo "Both Blue and Green namespaces are present! Exiting"
            echo `kubectl get ns | grep python-app-green | wc -l`
            exit 1
         fi

    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
       cd k8s
       kustomize edit set image streamlit=$DOCKER_USERNAME/streamlit:$GITHUB_SHA
       kustomize edit set image fastapi-backend=$DOCKER_USERNAME/backend:$GITHUB_SHA
       cat kustomization.yaml
    
    - name: Deploy updated Kubernetes resources
      run: |
        kubectl apply -k k8s/ 

     # REMOVE OLD DEPLOYMENT!!
    - name: Remove old namespace
      run: |
        namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
        if [ $namespacePresentOld -eq 1 ]
        then
          kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
        fi
 
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump docker tag"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 